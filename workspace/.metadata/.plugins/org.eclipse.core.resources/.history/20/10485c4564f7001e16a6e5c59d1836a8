/*
 * convolve.s
 *
 *  Created on: 29/01/2023
 *      Author: Hou Linxin
 */
   .syntax unified
	.cpu cortex-m4
	.fpu softvfp
	.thumb

		.global convolve

@ Start of executable code
.section .text

@ CG2028 Assignment 1, Sem 2, AY 2023/24
@ (c) ECE NUS, 2024

@ Write Student 1’s Name here:
@ Write Student 2’s Name here:

@ You could create a look-up table of registers here:

@ R0 ...
@ R1 ...


@ Start of program. Check if this is correct for potential bug
@ R0 holds pointer to start address to signal array
@ R1 holds pointer to start address to kernel array --> it then changes to store the changing signal array. cause we dn the start address to kernel. We have the R5 to store the last element address already
@ R2 holds M, signal size
@ R3 holds N, kernel size


@ R4 :
@ R5 :
@ R6 :
@ R7 :
@ R8 :
@ R9 :
@ R10:
@ R11:
@ R12:





@ write your program from here:
convolve:
 	PUSH {R4-R11, LR}



	@ Flipping of kernel from left to right









	POP {R4-R11, PC}


	@ main.c -> ASM -> subrountine
	@ As LR can only store one return address
	@ We are pushing R14, the return address for us to go back from ASM to main.c
	@ Into stack first, before going into the subrountine and replacing LR with
	@ the return address to the ASM main function.
	@ R14 is the LR -> Link Register
	@ So if we want to add more subrountines here, always preserve the return address
	@ (that is in R14), into the stack before going into that subrountine.
	@ R0-R3, R12 do not need to be PUSH and POP. bcs they are caller-saved
	@ R4-R11, R14 ARE NOT, u need to PUSH and POP. bcs they are callee-saved
	@PUSH {R14}

	@BL SUBROUTINE

	@POP {R14}
	BX LR

SUBROUTINE:

	BX LR
